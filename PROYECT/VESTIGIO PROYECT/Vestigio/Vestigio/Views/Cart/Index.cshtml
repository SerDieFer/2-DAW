@model Vestigio.Models.Order

@{
    var orderDetailsList = Model.OrderDetails?.ToList() ?? new List<OrderDetail>();
}

<div class="container-fluid mb-5">
    <!-- Header -->
    <div class="d-flex justify-content-between align-items-center mb-4 header-zone">
        <h1 class="h3 mb-0 header-hover fw-bold">
            <i class="bi bi-cart3 me-2"></i>My Cart
        </h1>
        <a href="@Url.Action("Index", "Showcase")" class="btn btn-outline-dark hover-scale fw-bold">
            <i class="bi bi-arrow-left me-2"></i>Back
        </a>
    </div>

    <!-- Contenido principal -->
    <div class="row g-4 orders-grid mb-5 pb-5">
        <!-- Sección de Productos -->
        <div class="col-12 @(ViewBag.ItemsCount > 0 ? "col-lg-8" : "")">
            <div class="card-detail shadow-sm">
                <div class="card-body p-4">
                    @if (ViewBag.ItemsCount > 0)
                    {
                        <form asp-action="UpdateCart" method="post" id="cartForm">
                            <input type="hidden" name="orderId" value="@Model.Id" />
                            <div class="table-responsive">
                                <table class="table table-hover align-middle">
                                    <thead class="bg-light">
                                        <tr>
                                            <th class="text-center"></th>
                                            <th class="text-center">Product</th>
                                            <th class="text-center">Size</th>
                                            <th class="text-center">Quantity</th>
                                            <th class="text-center">Price</th>
                                            <th class="text-center">Total</th>
                                            <th class="text-center">Actions</th>
                                        </tr>
                                    </thead>
                                    <tbody>
                                        @for (int i = 0; i < orderDetailsList.Count(); i++)
                                        {
                                            var item = orderDetailsList[i];
                                            <tr data-item-id="@item.Id">
                                                <!-- Imagen del Producto -->
                                                <td class="text-center align-middle">
                                                    <a href="#" class="open-product-modal" data-product-id="@item.Product.Id">
                                                        <img src="@item.Product.Images.First().Url"
                                                             class="product-thumb-lg img-fluid rounded"
                                                             alt="@item.Product.Name">
                                                    </a>
                                                </td>

                                                <!-- Nombre y Descripción -->
                                                <td class="text-center align-middle">
                                                    <input type="hidden" name="orderDetails[@i].Id" value="@item.Id" />
                                                    <input type="hidden" name="orderDetails[@i].ProductId" value="@item.ProductId" />
                                                    <div class="fw-bold">@item.Product.Name</div>
                                                </td>

                                                <!-- Selector de Talla -->
                                                <td class="text-center align-middle">
                                                    <select name="orderDetails[@i].ProductSizeId"
                                                            class="form-select form-select-sm size-selector text-center"
                                                            style="width: 80px"
                                                            data-original-value="@item.ProductSizeId"
                                                            data-initial-stock="@item.ProductSize.Stock"
                                                            onchange="updateMaxQuantity(this)">
                                                        @foreach (var size in item.Product.ProductSizes)
                                                        {
                                                            <option value="@size.Id"
                                                                    data-stock="@size.Stock"
                                                                    selected="@(size.Id == item.ProductSizeId)">
                                                                @size.Size
                                                            </option>
                                                        }
                                                    </select>
                                                </td>

                                                <!-- Cantidad -->
                                                <td class="text-center align-middle">
                                                    <div class="d-flex justify-content-center">
                                                        <input type="number"
                                                               name="orderDetails[@i].Quantity"
                                                               value="@item.Quantity"
                                                               min="1"
                                                               max="@item.ProductSize.Stock"
                                                               style="width:60px"
                                                               class="form-control form-control-sm text-center quantity-input"
                                                               data-original-value="@item.Quantity"
                                                               data-original-quantity="@item.Quantity"
                                                               data-original-max="@item.ProductSize.Stock"
                                                               oninput="validateQuantity(this)">
                                                    </div>
                                                </td>

                                                <!-- Precio Unidad -->
                                                <td class="text-center align-middle">@item.Price.ToString("C")</td>

                                                <!-- Precio Total -->
                                                <td class="text-center align-middle fw-bold">
                                                    @((item.Price * item.Quantity).ToString("C"))
                                                </td>

                                                <!-- Acciones -->
                                                <td class="text-center align-middle">
                                                    <button type="button"
                                                            class="btn btn-link text-danger"
                                                            onclick="removeItem(@item.Id, @ViewBag.IsLastItem.ToString().ToLower())">
                                                        <i class="bi bi-trash"></i>
                                                    </button>
                                                </td>
                                            </tr>
                                        }
                                    </tbody>
                                </table>
                            </div>

                            <!-- Botones de Acción (Ocultos inicialmente) -->
                            <div id="actionButtons" class="text-end px-3 pb-4" style="display: none;">
                                <button type="button"
                                        class="btn btn-outline-danger hover-scale me-2"
                                        id="resetChanges">
                                    <i class="bi bi-x-circle me-2"></i>Cancel
                                </button>
                                <button type="submit" class="btn btn-outline-success hover-scale">
                                    <i class="bi bi-save me-2"></i>Save Changes
                                </button>
                            </div>
                        </form>
                    }
                    else
                    {
                        <!-- Carrito Vacío -->
                        <div class="text-center py-5 w-100">
                            <div class="empty-cart-icon mb-4">
                                <i class="bi bi-cart-x display-4 text-muted"></i>
                            </div>
                            <h3 class="h5 mb-3">Your Shopping Cart is Empty</h3>
                            <p class="text-muted mb-4">Explore the challenges and find something special!</p>
                            <a href="@Url.Action("Index", "Showcase")" class="btn btn-dark hover-scale px-5">
                                <i class="bi bi-bag me-2"></i>Start Exploring!
                            </a>
                        </div>
                    }
                </div>
            </div>
        </div>

        <!-- Panel Resumen (Solo si hay productos) -->
        @if (ViewBag.ItemsCount > 0)
        {
            <div class="col-12 col-lg-4">
                <div class="card-detail shadow-sm h-100 p-4">
                    <div class="card-body d-flex flex-column">
                        <h5 class="card-title mb-4 fw-bold">
                            <i class="bi bi-wallet2 me-2"></i>Order Summary
                        </h5>

                        <div class="payment-summary">
                            <div class="d-flex flex-column gap-3">
                                <div class="d-flex justify-content-between">
                                    <span class="fw-bold">Subtotal (@ViewBag.ItemsCount items):</span>
                                    <span>@ViewBag.Total.ToString("C")</span>
                                </div>
                                <div class="d-flex justify-content-between">
                                    <span class="fw-bold">Shipping:</span>
                                    <span class="text-success">FREE</span>
                                </div>
                                <hr>
                                <div class="d-flex justify-content-between fw-bold">
                                    <span class="fw-bold">Total:</span>
                                    <span>@ViewBag.Total.ToString("C")</span>
                                </div>
                            </div>

                            @if (ViewBag.IsPending)
                            {
                                <div class="alert alert-warning mt-4 fw-bold text-center">
                                    <i class="bi bi-exclamation-circle me-2"></i>
                                    Payment pending confirmation
                                </div>
                            }
                            else
                            {
                                <div class="alert alert-success mt-4 fw-bold text-center">
                                    <i class="bi bi-check-circle me-2"></i>
                                    Payment completed
                                </div>
                            }

                            <div class="mt-4">
                                <form asp-action="ConfirmOrder" method="post">
                                    <button type="submit" class="btn btn-success w-100 py-3 hover-scale bounce-on-hover fw-bold">
                                        <i class="bi bi-lock me-2"></i>Checkout
                                    </button>
                                </form>

                                <button class="btn btn-outline-dark w-100 py-3 hover-scale bounce-on-hover fw-bold mt-3"
                                        onclick="window.print()">
                                    <i class="bi bi-printer me-2"></i>Print Details
                                </button>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        }
    </div>
</div>

<!-- Modal Product Info -->
<div id="modalContainer"></div>

<!-- Modal de Confirmación para Eliminar Ítem -->
<div class="modal fade" id="deleteItemModal" tabindex="-1">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Delete Product</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body" id="deleteItemModalBody">
                <!-- Mensaje dinámico -->
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                <button type="button" class="btn btn-danger" id="confirmDeleteItem">Delete</button>
            </div>
        </div>
    </div>
</div>

@section Styles {
    <link rel="stylesheet" href="~/css/orders.css" asp-append-version="true" />
}

@section Scripts {
    <script>
        document.addEventListener('DOMContentLoaded', () => {
            // Elementos del DOM y variables globales
            const actionButtons = document.getElementById('actionButtons');
            const stockCache = new Map();
            let currentItemToDelete = null;

            // Función para actualizar el stock máximo
            window.updateMaxQuantity = async (selectElement) => {
                const originalSizeId = selectElement.dataset.originalValue;
                const quantityInput = selectElement.closest('tr').querySelector('.quantity-input');
                const originalQuantity = quantityInput.dataset.originalQuantity;

                try {
                    if (selectElement.value === originalSizeId) {
                        quantityInput.value = originalQuantity;
                        quantityInput.max = selectElement.dataset.initialStock;
                    } else {
                        quantityInput.value = 1;
                        if (!stockCache.has(selectElement.value)) {
                            const response = await fetch(`@Url.Action("GetStock", "Cart")?productSizeId=${selectElement.value}`);
                            const stock = await response.json();
                            stockCache.set(selectElement.value, stock);
                        }
                        quantityInput.max = stockCache.get(selectElement.value);
                    }

                    if (parseInt(quantityInput.value) > parseInt(quantityInput.max)) {
                        quantityInput.value = quantityInput.max;
                    }
                } catch (error) {
                    console.error('Error:', error);
                    quantityInput.max = 999;
                }
            };

            // Validación de cantidad en tiempo real
            const handleQuantityInput = (input) => {
                const max = parseInt(input.max) || 999;
                let value = Math.min(Math.max(input.value, 1), max);
                input.value = value !== 1 ? value : 1;
            };

            // Verificador de cambios globales
            const checkChanges = () => {
                const hasChanges = Array.from(document.querySelectorAll('[data-original-value]'))
                    .some(element => element.value !== element.dataset.originalValue);
                actionButtons.style.display = hasChanges ? 'block' : 'none';
            };

            // Event listeners para selects de tallas
            document.querySelectorAll('.size-selector').forEach(select => {
                select.dataset.originalValue = select.value;
                select.addEventListener('change', async () => {
                    await updateMaxQuantity(select);
                    checkChanges();
                });
            });

            // Event listeners para inputs de cantidad
            document.querySelectorAll('.quantity-input').forEach(input => {
                input.dataset.originalValue = input.value;
                input.max = input.dataset.originalMax;
                input.addEventListener('input', () => {
                    handleQuantityInput(input);
                    checkChanges();
                });
            });

            // Botón Cancelar
            document.getElementById('resetChanges')?.addEventListener('click', () => {
                document.querySelectorAll('[data-original-value]').forEach(element => {
                    element.value = element.dataset.originalValue;
                    if (element.classList.contains('size-selector')) {
                        const quantityInput = element.closest('tr').querySelector('.quantity-input');
                        quantityInput.value = quantityInput.dataset.originalQuantity;
                        quantityInput.max = element.dataset.initialStock;
                    }
                    element.dispatchEvent(new Event('change'));
                });
                checkChanges();
            });

            // Eliminar ítem - Mostrar modal
            window.removeItem = (itemId, isLastItem) => {
                const modalBody = document.getElementById('deleteItemModalBody');
                if (isLastItem) {
                    modalBody.innerHTML = `
                        <p>You are about to delete the last item in your order. This will also delete the entire order.</p>
                        <p>Are you sure you want to proceed?</p>
                    `;
                } else {
                    modalBody.innerHTML = `
                        <p>Are you sure you want to remove this product from your order?</p>
                    `;
                }

                currentItemToDelete = itemId;
                new bootstrap.Modal(document.getElementById('deleteItemModal')).show();
            };

            // Confirmar eliminación de ítem
            document.getElementById('confirmDeleteItem').addEventListener('click', async () => {
                try {
                    const response = await fetch(`/Cart/RemoveFromCart?orderDetailId=${currentItemToDelete}`, {
                        method: 'POST',
                        headers: {
                            'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]').value
                        }
                    });

                    const result = await response.json();

                    if (result.success) {
                        // Eliminar la fila de la tabla
                        const itemRow = document.querySelector(`tr[data-item-id="${currentItemToDelete}"]`);
                        if (itemRow) {
                            itemRow.remove();
                        }

                        // Verificar si la orden fue eliminada
                        if (result.orderDeleted) {
                            window.location.href = result.redirectUrl; // Redirigir al carrito
                        } else {
                            // Actualizar el total en la UI
                            updateTotals(result.newTotal);
                        }

                        showToast('Item removed successfully', 'success');
                    } else {
                        showToast(result.message || 'Error removing item', 'danger');
                    }
                } catch (error) {
                    showToast('Error removing item', 'danger');
                } finally {
                    currentItemToDelete = null;
                    bootstrap.Modal.getInstance(document.getElementById('deleteItemModal')).hide();
                }
            });


            // Confirmar eliminación de pedido
            document.getElementById('confirmDeleteOrder').addEventListener('click', () => {
                bootstrap.Modal.getInstance(document.getElementById('deleteOrderModal')).hide();
                deleteOrder();
            });

            // Inicialización de caché de stock
            document.querySelectorAll('.size-selector').forEach(select => {
                const initialSizeId = select.value;
                if (initialSizeId) {
                    stockCache.set(initialSizeId, parseInt(select.dataset.initialStock));
                    select.closest('tr').querySelector('.quantity-input').max = select.dataset.initialStock;
                }
            });
        });


        document.querySelectorAll('.open-product-modal').forEach(function (link) {
            link.addEventListener('click', function (e) {
                e.preventDefault();
                const productId = this.getAttribute('data-product-id');

                fetch(`/UserOrders/ProductModal?productId=${productId}`)
                    .then(response => response.text())
                    .then(html => {
                        // Inyecta el contenido en el contenedor
                        document.getElementById('modalContainer').innerHTML = html;
                        // Muestra el modal (suponiendo que el parcial tenga un id que incluya el productId)
                        const modalElement = document.getElementById(`productModal-${productId}`);
                        const modal = new bootstrap.Modal(modalElement);
                        modal.show();
                    })
                    .catch(error => console.error('Error:', error));
            });
        });
    </script>
}
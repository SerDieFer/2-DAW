@model Vestigio.Utilities.PaginatedList<Vestigio.Models.Order>
@{
    ViewData["Title"] = "Mis Pedidos";
    var filters = ViewBag.Filters as dynamic;
}

<div class="container-fluid">
    <div class="d-flex justify-content-between align-items-center mb-4">
        <h1 class="h3 mb-0"><i class="bi bi-receipt me-2"></i>@ViewData["Title"]</h1>
        <button class="btn btn-outline-dark" type="button" data-bs-toggle="offcanvas" data-bs-target="#filters">
            <i class="bi bi-funnel"></i> Filtros
        </button>
    </div>

    <!-- Filtros Offcanvas -->
    <div class="offcanvas offcanvas-end" tabindex="-1" id="filters">
        <div class="offcanvas-header">
            <h5 class="offcanvas-title">Filtros de búsqueda</h5>
            <button type="button" class="btn-close" data-bs-dismiss="offcanvas"></button>
        </div>
        <div class="offcanvas-body">
            <form method="get" class="row g-3">
                <div class="col-12">
                    <label class="form-label">Rango de fechas</label>
                    <div class="input-group">
                        <input type="date" name="startDate" class="form-control" value="@filters?.startDate?.ToString("yyyy-MM-dd")">
                        <span class="input-group-text">a</span>
                        <input type="date" name="endDate" class="form-control" value="@filters?.endDate?.ToString("yyyy-MM-dd")">
                    </div>
                </div>

                <div class="col-12">
                    <label class="form-label">Estado</label>
                    <select name="statusId" class="form-select">
                        <option value="">Todos los estados</option>
                        @foreach (var status in ViewBag.Statuses)
                        {
                            <option value="@status.Id" selected="@(filters?.statusId == status.Id ? "selected" : null)">
                                @status.StatusName
                            </option>
                        }
                    </select>
                </div>

                <div class="col-12">
                    <label class="form-label">Rango de total</label>
                    <div class="input-group">
                        <input type="number" step="0.01" name="minTotal" class="form-control"
                               placeholder="Mínimo" value="@filters?.minTotal">
                        <input type="number" step="0.01" name="maxTotal" class="form-control"
                               placeholder="Máximo" value="@filters?.maxTotal">
                    </div>
                </div>

                <div class="col-12">
                    <button type="submit" class="btn btn-dark w-100">
                        <i class="bi bi-filter-circle me-2"></i>Aplicar Filtros
                    </button>
                </div>
            </form>
        </div>
    </div>

    <!-- Listado de pedidos -->
    <div class="card shadow-sm border-0">
        <div class="table-responsive">
            <table class="table table-hover mb-0">
                <thead class="table-light">
                    <tr>
                        <th>N° Pedido</th>
                        <th>Fecha</th>
                        <th>Estado</th>
                        <th class="text-end">Total</th>
                        <th></th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var order in Model)
                    {
                        <tr>
                            <td>#@order.Id</td>
                            <td>@order.CreationDate.ToString("dd MMM yyyy")</td>
                            <td>
                                <span class="badge @GetStatusBadgeClass(order.OrderStatus.StatusName)">
                                    @order.OrderStatus.StatusName
                                </span>
                            </td>
                            <td class="text-end">@order.Total.ToString("C")</td>
                            <td class="text-end">
                                <a href="@Url.Action("Details", new { id = order.Id })"
                                   class="btn btn-sm btn-outline-dark">
                                    <i class="bi bi-chevron-right"></i>
                                </a>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>

        <!-- Paginación -->
        @if (Model.TotalPages > 1)
        {
            <nav class="d-flex justify-content-center p-4">
                <ul class="pagination">
                    <li class="page-item @(!Model.HasPreviousPage ? "disabled" : "")">
                        <a class="page-link"
                           asp-action="Index"
                           asp-all-route-data="GetRouteData(1)">
                            <i class="bi bi-chevron-double-left"></i>
                        </a>
                    </li>

                    @for (int i = 1; i <= Model.TotalPages; i++)
                    {
                        <li class="page-item @(i == Model.PageIndex ? "active" : "")">
                            <a class="page-link"
                               asp-action="Index"
                               asp-all-route-data="GetRouteData(i)">@i</a>
                        </li>
                    }

                    <li class="page-item @(!Model.HasNextPage ? "disabled" : "")">
                        <a class="page-link"
                           asp-action="Index"
                           asp-all-route-data="GetRouteData(Model.TotalPages)">
                            <i class="bi bi-chevron-double-right"></i>
                        </a>
                    </li>
                </ul>
            </nav>
        }
    </div>
</div>

@functions {
    string GetStatusBadgeClass(string status)
    {
        return status switch
        {
            "Pending" => "bg-warning text-dark",
            "Confirmed" => "bg-success",
            "Cancelled" => "bg-danger",
            _ => "bg-secondary"
        };
    }

    Dictionary<string, string> GetRouteData(int page)
    {
        var routeData = new Dictionary<string, string>();
        var filters = ViewBag.Filters as dynamic;

        if (filters?.startDate != null)
            routeData.Add("startDate", filters.startDate.ToString("yyyy-MM-dd"));
        if (filters?.endDate != null)
            routeData.Add("endDate", filters.endDate.ToString("yyyy-MM-dd"));
        if (filters?.minTotal != null)
            routeData.Add("minTotal", filters.minTotal.ToString());
        if (filters?.maxTotal != null)
            routeData.Add("maxTotal", filters.maxTotal.ToString());
        if (filters?.statusId != null)
            routeData.Add("statusId", filters.statusId.ToString());

        routeData.Add("pageNumber", page.ToString());
        return routeData;
    }
}